-> Making a Binary Search Tree <- BST:
	-> This is a type of data structure, which sorts data hierarchically 
	-> We are constructing a BST and performing an in-order traversal in this project 
	-> There are also other operations which this project goes through -> insertion, search and deletion 

-> Creating a BST:
	-> This is a data structure where each node has at least two or more branches (children) coming off of it 
	-> Binary search tree 
	-> This is for searching and sorting operations 
	-> The branches on the left side of the node contain values which are less than it 
	-> The branches on the right side of the node contain values which are greater than it 
	-> This is defined using the TreeNode class 
	-> __init__ <- To initialise the attributes of the object 
		-> Arguments to this:
			-> self <- The instance of the class being created 
			-> key <- The value to be stored in the node  
		-> self.key = key <- The key attribute of the TreeNode instance 
		-> Then initialising the left and right attributes of the node to `None` <- when a node is first created, it doesn't have any left or right children  

-> Then we create the `BinarySearchTree` class: 
	-> This represents a binary search tree 
	-> Then again using an __init__ method, with a `self` parameter 
	-> We then define instance attributes for this
		-> `root` <- The root node of the binary search tree 
			-> This is the constructor when a new `BinarySearchTree` object is created 
		-> self.root = None <- We start with an empty tree, so we set the root attribute to None

-> Then defining a mechanism to insert nodes into the tree:
	-> We define an empty insert method in the `BinarySearchTree` class for this and give it a `self` parameter 
	-> We then define an `insert` method <- this will be called by the user, in addition to the `self` parameter

	-> This also needs a `key` parameter: 
		-> We are inserting values into the binary tree
		-> This is the key value we want to insert into the tree 

	-> Performing the insertion:
		-> We are then defining another method (_insert()), that performs the insertion 
		-> This is done with `self._insert(self.root, key)`
		-> self.root = self._insert(self.root, key) <- This passes the root node of the tree as the first argument 
			-> This is the starting point for the insertion process key  
		-> We are defining a helper function to do the insertion 
		-> This is a recursive method <- it calls itself to traverse the tree until we have a valid location for the new node
		-> This is a function (method) to add an element into the tree 
		-> The root node of the tree is passed as the first argument to this (node, self and key)

	-> Then we check if the node parameter is None:
		-> If this parameter is `None`, then the method has reached a leaf node or an empty place in the tree, where the new node should be inserted
		-> We are writing an if statement, which checks if node is None
		-> And then returning TreeNode(key), to create a new TreeNode instance with the provided key
		-> This becomes the new lead node, to insert the key into the tree 
		-> This is a code / mathematical representation of a tree 

	-> Then inserting values into the tree:
		-> We are traversing the tree and inserting values into it, using the rules for binary trees:
			-> Values smaller than the key are placed in the left subtree
			-> Values greater than the key are placed in the right subtree
			-> We have a node, and we want to put items into the tree <- this method is placing them into the tree, depending on its rules 
			-> To code these rules, we need to use < / > and if blocks 
			-> Placing in the element in the left or right subtree, depending on which element this is 
			-> This gives us a boolean, and depending on its value the new number is placed into the left or right side of the tree    
		-> Then after the values have been added to the tree, we have to call the new one 
		-> This is part of a recursive call stack  

-> Then working on the search functionality of the program:
	-> We are defining a method for this (`search`), inside the `BinarySearchTree` class 
	-> The two arguments of this are `self` and `key`
	-> Then deleting `pass` inside this method and calling the private helped method `_search` with the arguments:
		-> self.root <- This is the root of the binary search tree 
			-> This search starts from the root 
		-> key <- This is the value the user wants to find in the binary search tree, when we search it 
		-> This delegates the search logic to the private `_search` method that performs the recursive search in the binary tree
	-> We then make the `search` method return the result of this 

-> Then defining a base case for the recursive search:
	-> We write an if statement to check:
		-> If node is `None` <- The search has reached the end of the branch without finding a key 
		-> If node.key == key <- Then the key has been found in the current node 
		-> We are combining these two conditions into one `or` operator for an if block 

	-> Then another if statement to check if the target key is less than the current node: 
		-> We return the result of calling the `_search` method with the left child of the current node and the `key` as arguments   
		-> We are comparing the value of the target key to the current node key 
		-> Depending on which is greater, the search carries on for the right or left subtree   

-> Then working on the deletion of nodes:
	-> In the `BinarySearchTree` class, we are defining a `delete` method 
	-> The arguments this takes are `self` and `key`
	-> The latter is the key of the value which we want to delete from the binary search tree  
	-> The deletion operation can result in a new root -> if the node to be deleted is the current root, so we define another method for this case 
	-> Then inside this class, we define a new helper method called `_delete` that takes `self`, `node`, and `key`
	-> Checking if the current node is `none` <- This implies that the key to be deleted was not found 
	-> Then checking if the target key is less than the current node key 
	-> Then checking if key > node.key 
	-> The conditionals are valid for nodes with zero or one child, but then we need to extend this to be valid for nodes with two or more 
	-> To do this we need to check if a left / right child exists 
	-> Then checking if the left child of the current node is `none` -> if it is, then the node has no left child in the tree 
		-> Then we return the right child of the block as its replacement 
		-> We repeat this process, but for the right child of the current node -> in which case the left child of the node is returned as its replacement 
		-> If none of these conditions is met, then it means that the node has right and left children <- rather than just one or the other 
		-> We want to find the minimum value which is coming off of a node on the tree 
		-> In this case this is on the right of the node <- the algorithm we are using places the elements which are smaller than the one on the node to the right of it, and the ones whose values are larger than it to its left 
		-> So we look to the far right of the node for the minimum value which is coming off of it <- this is its 'successor'
		-> We add a `_min_value` after the elif block for this <- this will be a helper method 
		-> Once we've found this minimum value, we want to recursively delete the node with it from the right subtree 
		-> This makes sure that the node with the minimum value from the tree is maintained, without compromising the binary property of the search tree
		-> So we find the minimum value to the right of the node in the tree, and then carry on deleting it 
	-> After changes have been made to the current node, we then want to return the updated tree with them

	-> Replacing nodes:
		-> We have a node and two branches coming off of it 
		-> All three of them have values, and the value of the branch on the right of the parent node is the one with the minimum value 
		-> We delete both branches coming off of the parent node and replace the value of that node with the minimum value of the node which we just deleted
		-> So we need to define a method to extract the minimum value of the branch, to the right of the parent node for this 
		-> This is the `_min_value` method
		-> The arguments of this are the `self` and `node` parameters
		-> To find the smallest value of the right subtree, we iterate through the left children of the node until we find the leftmost one 
		-> We write a while loop that runs when node.left is not None to do this 
			-> This checks if there's a left child 
			-> If we have iterated through all of the left elements of the node and the boolean has a certain value, then we will know we have reached its leftmost node 
			-> The loop exits once we have this left most elements of the node, and we return its key 

-> Implementing the in-order traversal algorithm:
	-> This is the method which will perform an in-order traversal of the binary search tree 
	-> This returns the keys of the nodes on the tree in sorted order 
	-> This is a depth-first binary tree traversal algorithm that first visits the left subtree, the current node, and then the right subtree
	-> We are storing the keys of these nodes in sorted order 
	-> And then sorting and returning them 
	-> We define the `_inorder_traversal` method for this 
		-> The arguments of this are self, node and result 
		-> `node` is the current node being considered during the traversal 
		-> `result` is the list to which the keys are appended in sorted order    
	-> Then checking if the current node is not empty and recursively calling the `_inorder_traversal` method 
	-> We then append the key of the current node to the `result` list 
	-> Then we recursively call the `_inorder_traversal` method on the right child of the current node 
		-> This recursively explores the right subtree in an in-order manner 
	-> We create an instance of the `BinarySearchTree` class and assign it to the `bst` variable 
	-> Then we create a list of nodes with different integer values, below the `BinarySearchTree` instance
	-> Then iterating through the `nodes` list inside the `for` loop body - to insert the values into the binary search tree 
	-> We are printing the results of these methods as we do this, to implement the search functionality  
	-> This is the result of this:

<__main__.TreeNode object at 0x7fecd9cc66b0>

		-> This is an object which we have created 
		-> This is default string representation when printing an instance of a class 
		-> We want to change this print to a useful value, by defining a method named `__str__` in the `TreeNode` class
			-> This is to take the `self` argument 
	-> We then return the results of the str() function, with self.key as its argument 
		-> This is the attribute of the current node object that stores the value associated with the node 
		-> After a change is made, we then print / return the result of this to see if it has worked 
		-> In this case one of the changes we are making is deleting and printing 40 from the tree, calling this with different arguments  
			-> Then searching for this in the tree, to make sure that it has been deleted 